---
import { storyblokEditable } from '@storyblok/astro';
import { Image } from 'astro:assets';

const { blok } = Astro.props;

// Funzione per estrarre larghezza e altezza dall'URL
function extractDimensionsFromURL(url) {
  const dimensionString = url.split('/')[5];
  const dimensions = dimensionString.split('x');
  return {
    width: dimensions[0],
    height: dimensions[1]
  };
}
---

<div {...storyblokEditable(blok)} class="product-container">

  <!-- Contenitore principale per l'immagine e i dettagli del prodotto -->
  <div class="product-main grid grid-cols-1 lg:grid-cols-2 gap-10">
    <!-- Colonna dell'immagine principale -->
    <div>
      <!-- Immagine principale -->
      <div class="main-image">
        <picture>
          <source
            srcset={`${blok.image.filename.split('/m/')[0]}/m/800x0/filters:format(avif)`}
            type="image/avif"
            media="(max-width: 768px)"
          />
          <source
            srcset={`${blok.image.filename.split('/m/')[0]}/m/800x0/filters:format(webp)`}
            type="image/webp"
            media="(max-width: 768px)"
          />
          <Image 
            src={`${blok.image.filename.split('/m/')[0]}/m/1200x0`} 
            alt={blok.title}
            width={extractDimensionsFromURL(blok.image.filename).width}
            height={extractDimensionsFromURL(blok.image.filename).height}
            format="webp"
            sizes="(max-width: 600px) 100vw, 50vw"
            class="w-full object-cover cursor-default"
            loading="eager"
          />
        </picture>
      </div>

      <!-- Thumbnails -->
      <div id="my-gallery" class="thumbs flex space-x-2 mt-4">
        <!-- Aggiungi l'immagine principale come primo thumbnail -->
        <a 
          href={blok.image.filename} 
          data-pswp-width={extractDimensionsFromURL(blok.image.filename).width} 
          data-pswp-height={extractDimensionsFromURL(blok.image.filename).height} 
          class="thumb w-20 cursor-pointer transition-opacity duration-300 hover:opacity-70"
        >
          <Image 
            src={`${blok.image.filename.split('/m/')[0]}/m/200x0`} 
            alt={blok.title}
            width={200}
            height={200}
            format="webp"
            sizes="20vw"
            class="w-full object-cover"
            loading="eager"
          />
        </a>
        {blok.thumbnails?.map((thumbnail, index) => (
          <a 
            key={index}
            href={thumbnail.filename} 
            data-pswp-width={extractDimensionsFromURL(thumbnail.filename).width} 
            data-pswp-height={extractDimensionsFromURL(thumbnail.filename).height}
            class="thumb w-20 cursor-pointer transition-opacity duration-300 hover:opacity-70"
          >
            <Image 
              src={`${thumbnail.filename.split('/m/')[0]}/m/200x0`} 
              alt={blok.title}
              width={200}
              height={200}
              format="webp"
              sizes="20vw"
              class="w-full object-cover"
              loading="eager"
            />
          </a>
        ))}
      </div>
    </div>

    <!-- Colonna dei dettagli del prodotto -->
    <div class="product-details flex flex-col space-y-4">
      <h1 class="text-2xl font-bold tracking-tight">{blok.title}</h1>
      <p>{blok.description}</p>
      <p class="text-xl font-semibold">${blok.price}</p>

      <!-- Selezione della taglia -->
      <div class="size-selection flex flex-wrap gap-2">
        {blok.sizes?.map(size => (
          <div key={size}>
            <input
              type="radio"
              id={`size-${size}`}
              name="size"
              value={size}
              class="size-input hidden"
              data-size={size}
            />
            <label for={`size-${size}`} class="size-button border px-4 py-2 cursor-pointer bg-gray-100" data-size={size}>
              {size}
            </label>
          </div>
        ))}
      </div>

      <!-- Pulsante Add to Cart -->
      <button 
        class="snipcart-add-item bg-blue-500 text-white px-4 py-2 rounded cursor-pointer disabled:bg-gray-300 disabled:cursor-not-allowed" 
        data-item-id={blok.id}
        data-item-name={blok.title}
        data-item-price={blok.price}
        data-item-url={`/products/${blok.slug}`}
        data-item-image={blok.image.filename}
        data-item-description={blok.description}
        data-item-custom1-name="Size"
        data-item-custom1-options={blok.sizes?.join('|')}
        data-item-custom1-value=""
        disabled
      >
        Buy Now
      </button>
    </div>
  </div>
</div>

<script>
  import 'photoswipe/style.css';
  import PhotoSwipeLightbox from 'photoswipe/lightbox';
  import PhotoSwipe from 'photoswipe';

  const lightbox = new PhotoSwipeLightbox({
    gallery: '#my-gallery',
    children: 'a',
    pswpModule: PhotoSwipe
  });

  lightbox.init();

  document.addEventListener('DOMContentLoaded', function () {
    const sizeInputs = document.querySelectorAll('.size-input') as NodeListOf<HTMLInputElement>;
    const addButton = document.querySelector('.snipcart-add-item') as HTMLButtonElement;

    let snipcartReady = false; // Flag per indicare se Snipcart è pronto
    let snipcartCSSLoaded = false; // Flag per verificare se il CSS è stato caricato

    // Funzione per caricare il CSS di Snipcart
    function loadSnipcartCSS(callback) {
      if (!snipcartCSSLoaded && !document.getElementById("snipcart-css")) {
        const link = document.createElement("link");
        link.rel = "stylesheet";
        link.href = "https://cdn.snipcart.com/themes/v3.2.1/default/snipcart.css";
        link.id = "snipcart-css";
        document.head.appendChild(link);

        link.onload = () => {
          snipcartCSSLoaded = true; // Imposta il flag per evitare duplicati
          if (callback) callback(); // Esegui il callback quando il CSS è caricato
        };
      } else if (snipcartCSSLoaded && callback) {
        callback(); // Se già caricato, esegui subito il callback
      }
    }

    // Disabilita il pulsante all'inizio
    function disableAddButton() {
      if (addButton) {
        addButton.disabled = true;
        addButton.classList.add('disabled');
      }
    }

    // Abilita il pulsante quando Snipcart è pronto e una taglia è selezionata
    function enableAddButton() {
      const selectedSize = document.querySelector('.size-input:checked') as HTMLInputElement;

      if (snipcartReady && selectedSize && addButton) {
        const selectedSizeValue = selectedSize.dataset.size;
        addButton.setAttribute('data-item-custom1-value', selectedSizeValue || '');
        addButton.disabled = false;
        addButton.classList.remove('disabled');
      }
    }

    // Aggiungi listener per le modifiche alla selezione della taglia
    if (sizeInputs.length > 0) {
      sizeInputs.forEach(input => {
        input.addEventListener('change', () => {
          if (snipcartReady) {
            enableAddButton();
          } else {
            disableAddButton(); // Rimane disabilitato se Snipcart non è pronto
          }
        });
      });
    }

    // Gestisce il click sul pulsante "Add to Cart"
    if (addButton) {
      addButton.addEventListener('click', () => {
        loadSnipcartCSS(() => {
          // Mostra il carrello dopo che il CSS è stato caricato
          if (!snipcartReady && typeof window.Snipcart === 'undefined') {
            window.LoadSnipcart?.(); // Inizializza Snipcart se necessario
          }

          if (window.Snipcart?.api?.modal) {
            window.Snipcart.api.modal.show();
          } else {
            document.addEventListener(
              'snipcart.ready',
              () => {
                window.Snipcart.api.modal.show();
              },
              { once: true } // Assicura che venga eseguito una sola volta
            );
          }
        });
      });
    }

    // Abilita il pulsante quando Snipcart è pronto
    document.addEventListener('snipcart.ready', () => {
      snipcartReady = true; // Imposta lo stato di Snipcart come pronto
      enableAddButton();
    });

    // Disabilita il pulsante all'inizio
    disableAddButton();
  });
</script>





<style>
/* Contenitore principale per la pagina del prodotto */
.product-container {
  padding: 20px;
  margin: 0 auto;
  max-width: 1200px;
}

/* Layout della griglia per la pagina del prodotto */
.product-main {
  display: grid;
  grid-template-columns: 1fr; /* Una colonna per mobile */
  gap: 20px;
}

@media (min-width: 1024px) {
  .product-main {
    grid-template-columns: 1fr 1fr; /* Due colonne per desktop */
  }
}

/* Stili per l'immagine principale */
.main-image img {
  width: 100%;
  max-width: 500px;
  max-height: 400px;
  object-fit: cover;
}

/* Modifica per rendere la sezione delle miniature scrollabile orizzontalmente */
.thumbs {
  display: flex;
  gap: 10px;
  margin-top: 20px;
  overflow-x: auto; /* Aggiunge lo scrolling orizzontale automatico */
  -webkit-overflow-scrolling: touch; /* Per un'esperienza di scorrimento fluida su dispositivi mobili */
}

.thumbs::-webkit-scrollbar {
  display: none; /* Nasconde la scrollbar su browser WebKit come Chrome e Safari */
}

.thumb {
  flex-shrink: 0; /* Impedisce che le immagini si riducano su schermi piccoli */
  width: 80px; /* Regola la larghezza delle miniature */
  cursor: pointer;
  transition: opacity 0.3s;
}

.thumb:hover {
  opacity: 0.7;
}

/* Stili per i dettagli del prodotto */
.product-details {
  display: flex;
  flex-direction: column;
}

.product-details h1 {
  margin: 0 0 10px;
}

.product-details p {
  margin: 5px 0;
}

/* Selezione della taglia */
.size-selection {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
}

.size-input {
  display: none; /* Nascondi i radio button */
}

.size-button {
  border: 1px solid #ccc;
  padding: 10px;
  cursor: pointer;
  background-color: #f9f9f9;
}

.size-button:hover {
  background-color: #e0e0e0;
}

.size-input:checked + .size-button {
  background-color: #50b0ae;
  color: white;
}

/* Pulsante Add to Cart */
.snipcart-add-item {
  cursor: pointer;
  margin-top: 10px;
  background-color: #50b0ae; /* Colore attivo predefinito */
  color: white; /* Testo attivo */
}

.snipcart-add-item.disabled, 
.snipcart-add-item:disabled {
  background-color: #ccc; /* Sfondo disabilitato */
  color: #666; /* Testo disabilitato */
  cursor: not-allowed;
}

</style>
