---
import { storyblokEditable } from '@storyblok/astro';

const { blok } = Astro.props;

// Funzione per estrarre il numero dal nome del file e ordinare le immagini
function sortImagesByFilename(images) {
  return images.sort((a, b) => {
    const numA = parseInt(a.filename.match(/(\d+)/)?.[0], 10);
    const numB = parseInt(b.filename.match(/(\d+)/)?.[0], 10);

    // Se entrambi i nomi dei file contengono numeri, ordina per numero
    if (!isNaN(numA) && !isNaN(numB)) {
      return numA - numB;
    }

    // Se solo uno dei due file ha un numero, quello senza numero va dopo
    if (!isNaN(numA)) return -1;
    if (!isNaN(numB)) return 1;

    // Se nessuno ha un numero, mantieni l'ordine originale
    return 0;
  });
}

// Ordina le immagini se esistono
const sortedImages = Array.isArray(blok.images) && blok.images.length > 0 
  ? sortImagesByFilename(blok.images)
  : [];
---

<article {...storyblokEditable(blok)} class="flex flex-col items-center my-12">
  <h1 class="text-center text-5xl font-bold mb-4">{blok.title}</h1>
  <p class="text-center text-xl text-gray-700 mb-8">{blok.teaser}</p>

  <div class="space-y-8">
    {sortedImages.length > 0 ? (
      sortedImages.map((image, index) => {
        // Determina l'alt del tag immagine
        const imageAlt = image.alt || blok.title || `Image ${index + 1}`;

        return (
          <div key={index} class="relative">
            <img 
              src={`${image.filename}/m/1600x0`} 
              alt={imageAlt} 
              class="cursor-pointer w-full max-w-screen-md thumb"
              data-fullsize={`${image.filename}/m/1600x0`}
            />
            {image.title && (
              <p class="absolute bottom-2 left-0 right-0 text-center text-sm text-gray-500 bg-white bg-opacity-75 p-2">
                {image.title}
              </p>
            )}
          </div>
        );
      })
    ) : (
      <p>No images available.</p>
    )}
  </div>

  <!-- Lightbox -->
  <div id="lightbox" class="lightbox" onclick="closeLightbox()">
    <span class="close">&times;</span>
    <img class="lightbox-content" id="lightbox-image" />
    <div id="caption"></div>
  </div>
</article>

<script>
  // Gestione delle miniature
  const thumbs = document.querySelectorAll('.thumb');
  thumbs.forEach(thumb => {
    thumb.addEventListener('click', function() {
      const fullsizeSrc = this.getAttribute('data-fullsize');
      const lightbox = document.getElementById('lightbox');
      const lightboxImage = document.getElementById('lightbox-image');
      const caption = document.getElementById('caption');

      lightbox.style.display = 'block';
      lightboxImage.src = fullsizeSrc;
      caption.innerHTML = this.alt;
    });
  });

  // Gestione della chiusura del lightbox
  function closeLightbox() {
    document.getElementById('lightbox').style.display = 'none';
  }

  window.closeLightbox = closeLightbox;
</script>

<style>
  .lightbox {
    display: none;
    position: fixed;
    z-index: 9999;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.8);
    overflow: auto;
  }

  .lightbox-content {
    margin: auto;
    display: block;
    max-width: 80%;
    max-height: 80vh;
  }

  .lightbox .close {
    position: absolute;
    top: 20px;
    right: 20px;
    color: #fff;
    font-size: 30px;
    font-weight: bold;
    cursor: pointer;
    background-color: rgba(0, 0, 0, 0.5);
    border-radius: 50%;
    width: 50px;
    height: 50px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .lightbox .close:hover {
    color: #bbb;
  }

  #caption {
    text-align: center;
    color: #fff;
    padding: 10px;
  }

  /* Stili per il titolo sotto l'immagine */
  .relative {
    position: relative;
  }

  .relative p {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background-color: rgba(255, 255, 255, 0.75);
    padding: 5px;
    text-align: center;
    font-size: 0.875rem; /* Small text */
    color: #333;
  }
</style>
