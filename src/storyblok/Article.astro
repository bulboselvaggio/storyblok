---
import { storyblokEditable, useStoryblokApi } from '@storyblok/astro';
import Navigation from '../components/Navigation.astro';
import Button from '../components/Button.astro';
import { Image } from 'astro:assets'; // Importa il componente Image

const { blok } = Astro.props;

// Funzione per rimuovere lo slash finale
function normalizeSlug(slug) {
  return slug.replace(/\/$/, ''); // Rimuove lo slash finale
}

const currentFullSlug = normalizeSlug(Astro.url.pathname.replace(/^\/|\/$/g, ''));
let storyblokApi;
let articles = [];
let previousArticle = null;
let nextArticle = null;
let firstPageSlug = null;
let bookPages = [];

try {
  storyblokApi = useStoryblokApi();

  // Filtra solo le root dei libri per la navigazione (is_startpage: 1)
  const { data: articlesData } = await storyblokApi.get(`cdn/stories`, {
    version: 'draft',
    starts_with: blok.category === 'book' ? 'books/' : 'blog/',
    is_startpage: blok.category === 'book' ? 1 : 0,
  });

  // Ordina le storie per data
  articles = articlesData.stories
    .filter(article => article.content.date && article.full_slug && article.content.category === blok.category)
    .sort((a, b) => new Date(b.content.date).getTime() - new Date(a.content.date).getTime());

  // Trova l'indice dell'articolo corrente con slug normalizzati
  const currentIndex = articles.findIndex(article => {
    const normalizedArticleSlug = normalizeSlug(article.full_slug);
    return normalizedArticleSlug === currentFullSlug;
  });

  if (currentIndex !== -1) {
    previousArticle = currentIndex < articles.length - 1 ? articles[currentIndex + 1] : null;
    nextArticle = currentIndex > 0 ? articles[currentIndex - 1] : null;
  }

  // Recupero delle pagine del libro corrente
  if (blok.category === 'book') {
    const bookSlug = articles[currentIndex]?.slug || blok.slug;
    const bookUuid = articles[currentIndex]?.uuid || blok.uuid;

    if (bookSlug && bookUuid) {
      const { data: pagesData } = await storyblokApi.get(`cdn/stories`, {
        version: 'draft',
        starts_with: `books/${bookSlug}/`,
        is_startpage: 0,
      });

      const bookPages = pagesData.stories.filter(page => page.content.bookreference === bookUuid);

      if (bookPages.length > 0) {
        const sortedPages = bookPages
          .filter(page => page.content.pagenumber)
          .sort((a, b) => parseInt(a.content.pagenumber, 10) - parseInt(b.content.pagenumber, 10)); // Conversione in numero

        firstPageSlug = sortedPages.length > 0 ? sortedPages[0].full_slug : null;
      }
    }
  }
} catch (error) {
  console.error("Error fetching stories from Storyblok:", error);
}

// Funzione per estrarre larghezza e altezza dall'URL
function extractDimensionsFromURL(url) {
  const dimensionString = url.split('/')[5];
  const dimensions = dimensionString.split('x');
  return {
    width: dimensions[0],
    height: dimensions[1]
  };
}

// Funzione per ordinare le immagini
const sortedImages = Array.isArray(blok.images) && blok.images.length > 0 
  ? blok.images.sort((a, b) => parseInt(a.filename.match(/(\d+)/)?.[0], 10) - parseInt(b.filename.match(/(\d+)/)?.[0], 10)) 
  : [];
---

<style>
  .pswp img {
    max-width: 90%;
    max-height: 90vh;
    object-fit: contain;
    margin: auto;
  }

  .gallery-item {
    padding: 0 15px;
  }

  .gallery-item img {
    width: 100%;
    height: auto;
    object-fit: contain;
  }

  article {
    padding: 0 20px;
  }

  @media (max-width: 768px) {
    .gallery-item {
      padding: 0 10px;
    }

    article {
      padding: 0 15px;
    }
  }

  .black-button {
    background-color: black;
    color: white;
    border: none;
  }

  .black-button:hover {
    background-color: black;
    color: #f0f0f0;
  }

  .cta-container {
    margin-top: 2rem;
    text-align: center;
  }
</style>

<article {...storyblokEditable(blok)} class="flex flex-col items-center my-12">
  <h1 class="text-center text-5xl font-bold mb-4">{blok.title}</h1>
  <p class="text-center text-xl text-gray-700 mb-8">{blok.teaser}</p>

  <!-- Galleria di immagini -->
  <div id="my-gallery" class="grid grid-cols-1 gap-8">
    {sortedImages.length > 0 ? (
      sortedImages.map((image, index) => {
        const imageAlt = image.alt || blok.title || `Image ${index + 1}`;
        const imageUrlBase = image.filename.split('/m/')[0];

        // Estrai larghezza e altezza dall'URL dell'immagine
        const { width, height } = extractDimensionsFromURL(image.filename);

        return (
        <a
          href={`${imageUrlBase}/m/1600x0`}
          data-pswp-width={width}
          data-pswp-height={height}
          data-pswp-srcset={` 
            ${imageUrlBase}/m/700x0 700w,
            ${imageUrlBase}/m/1000x0 1000w,
            ${imageUrlBase}/m/1600x0 1600w
          `}
          class="relative gallery-item"
        >
            <picture>
              <source
                srcset={`${imageUrlBase}/m/500x0/filters:format(avif)`}
                type="image/avif"
                media="(max-width: 768px)"
              />
              <source
                srcset={`${imageUrlBase}/m/500x0/filters:format(webp)`}
                type="image/webp"
                media="(max-width: 768px)"
              />
              <Image 
                src={`${imageUrlBase}/m/800x0`} 
                alt={imageAlt}
                width={width}
                height={height}
                format="webp"
                sizes="(max-width: 600px) 100vw, 50vw"
                class="cursor-pointer w-full max-w-screen-md thumb"
                loading="eager"
              />
            </picture>
            {image.title && (
              <p class="absolute bottom-2 left-0 right-0 text-center text-sm text-gray-500 bg-white bg-opacity-75 p-2">
                {image.title}
              </p>
            )}
          </a>
        );
      })
    ) : (
      <p>No images available.</p>
    )}
  </div>

  <!-- Mostra il contenuto del libro -->
  {blok.content?.content?.map((block) => (
    <div class="book-content">
      {block.content?.map((paragraph, pIndex) => (
        <p class="text-gray-800">{paragraph.text}</p>
      ))}
    </div>
  ))}

  <!-- Pulsante per iniziare a leggere il libro -->
  {blok.category === 'book' && firstPageSlug && (
    <div class="cta-container">
      <Button href={`/${firstPageSlug.endsWith('/') ? firstPageSlug : `${firstPageSlug}/`}`} label="Start reading" extraClasses="cta-button" />
    </div>
  )}

  <!-- Navigazione tra articoli -->
  <Navigation 
    previousItem={previousArticle ? { name: previousArticle.content.title, url: `/${previousArticle.full_slug}` } : null} 
    nextItem={nextArticle ? { name: nextArticle.content.title, url: `/${nextArticle.full_slug}` } : null} 
  />
</article>

<script>
  import 'photoswipe/style.css';
  import PhotoSwipeLightbox from 'photoswipe/lightbox';
  import PhotoSwipe from 'photoswipe';

  const lightbox = new PhotoSwipeLightbox({
    gallery: '#my-gallery',
    children: 'a',
    pswpModule: PhotoSwipe
  });

  lightbox.init();
</script>
