---
import { storyblokEditable, useStoryblokApi } from '@storyblok/astro';
import Navigation from '../components/Navigation.astro'; // Importa il componente di navigazione

const { blok } = Astro.props;

// Ottieni lo slug dall'URL
const currentSlug = Astro.url.pathname.split('/').pop();

// Ottieni l'articolo corrente dallo slug
const storyblokApi = useStoryblokApi();
const { data: currentArticleData } = await storyblokApi.get(`cdn/stories/blog/${currentSlug}`, {
  version: 'published', // Cambia in 'draft' per sviluppo locale
});

// Recupera tutti gli articoli ordinati per data (dal più recente al meno recente)
const { data } = await storyblokApi.get(`cdn/stories`, {
  version: 'published', // Cambia in 'draft' per sviluppo locale
  starts_with: 'blog/',
  is_startpage: 0,
});

// Filtra e ordina gli articoli
function getSortedArticlesWithDate(articles) {
  return articles
    .filter(article => article.content.date && article.slug) // Verifica la presenza di date e slug
    .sort((a, b) => new Date(b.content.date) - new Date(a.content.date)); // Ordina per data
}

const articles = getSortedArticlesWithDate(data.stories || []);

// Trova l'indice dell'articolo corrente
const currentIndex = articles.findIndex(article => article.slug === currentSlug);

// Se l'articolo corrente è trovato, trova l'articolo precedente e successivo
const previousArticle = currentIndex < articles.length - 1 ? articles[currentIndex + 1] : null;
const nextArticle = currentIndex > 0 ? articles[currentIndex - 1] : null;

// Funzione per estrarre il numero dal nome del file e ordinare le immagini
function sortImagesByFilename(images) {
  return images.sort((a, b) => {
    const numA = parseInt(a.filename.match(/(\d+)/)?.[0], 10);
    const numB = parseInt(b.filename.match(/(\d+)/)?.[0], 10);
    return numA - numB;
  });
}

// Funzione per estrarre larghezza e altezza dall'URL
function extractDimensionsFromURL(url) {
  const dimensionString = url.split('/')[5];
  const dimensions = dimensionString.split('x');
  return {
    width: dimensions[0],
    height: dimensions[1]
  };
}

const sortedImages = Array.isArray(blok.images) && blok.images.length > 0 
  ? sortImagesByFilename(blok.images)
  : [];
---

<style>
  /* Stili per il lightbox */
  .pswp img {
    max-width: 90%;
    max-height: 90vh;
    object-fit: contain;
    margin: auto;
  }

  /* Margine interno al contenitore per evitare che tocchi il bordo */
  .gallery-item {
    padding: 0 15px; /* Uniforma il padding laterale */
  }

  /* Assicura che l'immagine non provochi scrolling orizzontale */
  .gallery-item img {
    width: 100%;
    height: auto;
    object-fit: contain;
  }

  /* Padding e margine coerenti con la pagina prodotto */
  article {
    padding: 0 20px; /* Aggiusta il padding a destra e sinistra per renderlo simile al prodotto */
  }

  /* Gestione dei margini specifica per mobile */
  @media (max-width: 768px) {
    .gallery-item {
      padding: 0 10px; /* Riduce il padding interno su mobile */
    }

    article {
      padding: 0 15px; /* Riduce il padding laterale su mobile per mantenere coerenza */
    }
  }
</style>

<article {...storyblokEditable(blok)} class="flex flex-col items-center my-12">
  <h1 class="text-center text-5xl font-bold mb-4">{blok.title}</h1>
  <p class="text-center text-xl text-gray-700 mb-8">{blok.teaser}</p>

  <!-- Galleria con layout Tailwind CSS -->
  <div id="my-gallery" class="grid grid-cols-1 gap-8">
    {sortedImages.length > 0 ? (
      sortedImages.map((image, index) => {
        const imageAlt = image.alt || blok.title || `Image ${index + 1}`;
        const imageUrlBase = image.filename.split('/m/')[0];

        // Estrai larghezza e altezza dall'URL dell'immagine
        const { width, height } = extractDimensionsFromURL(image.filename);

        return (
          <a
            key={index}
            href={`${imageUrlBase}/m/1600x0`}
            data-pswp-width={width}
            data-pswp-height={height}
            data-pswp-srcset={`
              ${imageUrlBase}/m/700x0 700w,
              ${imageUrlBase}/m/1000x0 1000w,
              ${imageUrlBase}/m/1600x0 1600w
            `}
            sizes="(max-width: 768px) 700px, (max-width: 1024px) 1000px, 1600px"
            class="relative gallery-item"
          >
            <picture>
              <source
                srcSet={`${imageUrlBase}/m/500x0/filters:format(avif)`}
                type="image/avif"
                media="(max-width: 768px)"
              />
              <source
                srcSet={`${imageUrlBase}/m/500x0/filters:format(webp)`}
                type="image/webp"
                media="(max-width: 768px)"
              />
              <img 
                src={`${imageUrlBase}/m/800x0`} 
                alt={imageAlt}
                class="cursor-pointer w-full max-w-screen-md thumb"
              />
            </picture>
            {image.title && (
              <p class="absolute bottom-2 left-0 right-0 text-center text-sm text-gray-500 bg-white bg-opacity-75 p-2">
                {image.title}
              </p>
            )}
          </a>
        );
      })
    ) : (
      <p>No images available.</p>
    )}
  </div>

  <!-- Navigazione tra articoli senza il componente -->
  <nav class="w-full flex justify-between mt-12">
    {previousArticle && (
      <a href={`/blog/${previousArticle.slug}`} class="text-lg text-[#50b0ae] font-bold">
        ← Articolo precedente: {previousArticle.content.title}
      </a>
    )}
    {nextArticle && (
      <a href={`/blog/${nextArticle.slug}`} class="text-lg text-[#50b0ae] font-bold">
        Articolo successivo: {nextArticle.content.title} →
      </a>
    )}
  </nav>
</article>


<script>
  import 'photoswipe/style.css';
  import PhotoSwipeLightbox from 'photoswipe/lightbox';
  import PhotoSwipe from 'photoswipe';

  const lightbox = new PhotoSwipeLightbox({
    gallery: '#my-gallery',
    children: 'a',
    pswpModule: PhotoSwipe
  });

  lightbox.init();
</script>
